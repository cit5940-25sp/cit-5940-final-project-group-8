+-----------------------------+
|        <<interface>>       |
|            Node            |      <-- Interpreter Pattern
+-----------------------------+
| + evaluate(env: Environment): int |
+-----------------------------+
             / |  \  \
            /  |   \  \
           V   V    V  V
+------------------+     +-------------------+     +-----------------+
|   NumberNode     |     |   BinaryOpNode    | ... |   IfNode        |
+------------------+     +-------------------+     +-----------------+
| - value: int     |     | - left: Node      |     | - condition: Node
|                  |     | - right: Node     |     | - thenBranch: Node
|                  |     | - operator: String|     | - elseBranch: Node
+------------------+     +-------------------+     +-----------------+
| + evaluate(env)  |     | + evaluate(env)   |     | + evaluate(env) |
+------------------+     +-------------------+     +-----------------+

               ▲
               |
               |
+------------------------------+
|        Environment           |         <-- Singleton Pattern
+------------------------------+
| - variables: Map<String, Integer> |
| - static instance: Environment   |
+------------------------------+
| + getInstance(): Environment     |
| + get(varName: String): int      |
| + set(varName: String, value: int)|
+------------------------------+

               ▲
               |
        uses during evaluation

+------------------------------+
|         NodeFactory          |         <-- Factory Pattern
+------------------------------+
| + createBinaryOp(op, l, r): Node |
| + createNumber(value): Node      |
| + createIf(cond, then, else): Node |
+------------------------------+
